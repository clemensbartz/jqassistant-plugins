apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'com.github.jruby-gradle.base'

project.ext["jqaversion"] = "1.4.0"
project.ext["jqacoreversion"] = "1.4"
project.group = 'de.kontext-e.jqassistant.plugin'
project.version = '1.4.2'

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
    classpath 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.11'
  }
}

asciidoctor {
  dependsOn jrubyPrepareGems
  requires = ['asciidoctor-diagram']
  gemPath = jrubyPrepareGems.outputDir
  sourceDir = file('doc/architecture')

  resources {
    from('doc/architecture') {
      include '**/*.png'
    }
  }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: "jacoco"
    apply plugin: 'pmd'
    apply plugin: 'org.asciidoctor.gradle.asciidoctor'
    apply plugin: 'com.github.jruby-gradle.base'

    project.version = project.parent.version
    sourceCompatibility = 1.8

	check.finalizedBy jacocoTestReport

	repositories {
        mavenCentral()
        mavenLocal()
    }

  dependencies {
    compileOnly  'com.buschmais.jqassistant.core:plugin:'+project.jqaversion
    compileOnly  'com.buschmais.jqassistant.core:scanner:'+project.jqaversion
    compileOnly  'com.buschmais.jqassistant.core:report:'+project.jqaversion
    compileOnly  'com.buschmais.jqassistant.core:store:'+project.jqaversion
    compileOnly  'com.buschmais.jqassistant.core:shared:'+project.jqaversion
    compileOnly  'com.buschmais.jqassistant.plugin:common:'+project.jqacoreversion

    testCompile  'com.buschmais.jqassistant.core:store:'+project.jqaversion
    testCompile  'org.neo4j:neo4j:2.3.12'
    testCompile  'com.buschmais.jqassistant.plugin:common:'+project.jqacoreversion
    testCompile 'com.buschmais.jqassistant.core:scanner:'+project.jqaversion

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'

    testCompile  'org.slf4j:slf4j-simple:1.7.21'

    gems 'rubygems:asciidoctor-diagram:1.2.1'
  }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from tasks.javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }

    artifacts {
      archives jar

      archives javadocJar
      archives sourcesJar
    }

  if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
  }

  jacoco {
    toolVersion = "0.7.6.201602180812"
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled false
    }
  }

  checkstyle {
      configFile = new File(rootDir, 'config/checkstyle/checks.xml')
      ignoreFailures = true
      showViolations = false
      toolVersion = '6.18'
    }

    findbugs {
      ignoreFailures = true
      effort = "max"
      reportLevel = "medium"
      toolVersion = '3.0.1'
    }

    pmd {
      ruleSets = ["java-basic", "java-braces"]
      ignoreFailures = true
      sourceSets = [sourceSets.main]
    }

  install {
        repositories.mavenInstaller {
            pom.groupId = 'de.kontext-e.jqassistant.plugin'
        }
    }

  asciidoctor {
    dependsOn jrubyPrepareGems
    requires = ['asciidoctor-diagram']
    gemPath = jrubyPrepareGems.outputDir
    sourceDir = file('src/main/asciidoc')

    resources {
      from('src/main/asciidoc') {
        include '**/*.png'
      }
    }
  }

}

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
	jqaRuntime
}

dependencies {
  jqaRuntime("com.buschmais.jqassistant.cli:jqassistant-commandline-neo4jv2:${project.jqaversion}") {
    exclude module: 'neo4j'
  }

    jqaRuntime  'com.buschmais.jqassistant.plugin:common:'+project.jqacoreversion
  jqaRuntime("com.buschmais.jqassistant.plugin:java:${project.jqacoreversion}")
  jqaRuntime("com.buschmais.jqassistant.plugin:junit:${project.jqacoreversion}")

  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.asciidoc:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.checkstyle:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.findbugs:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.git:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.jacoco:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.javaparser:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.linecount:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.plaintext:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.plantuml:${project.version}")
  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.pmd:${project.version}")
  //  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.cpp:${project.version}")

  	gems 'rubygems:asciidoctor-diagram:1.2.1'
}

task removeJQAReport(type: Delete) {
  delete 'jqassistant/report'
  delete 'jqassistant/store'
}

task(jqascan, dependsOn: 'removeJQAReport', type: JavaExec) {
  main = 'com.buschmais.jqassistant.commandline.Main'
  classpath = configurations.jqaRuntime
  args 'scan'
  args '-p'
  args 'jqassistant/jqassistant.properties'
  args '-f'

  rootProject.subprojects {
    args 'java:classpath::'+it.name+'/build/classes/main'
    args 'java:classpath::'+it.name+'/build/classes/test'
    args it.name+'/build/reports'
    args it.name+'/src/main'
    args it.name+'/src/test'
  }

  args 'plantuml/src/test/asciidoc'
  args 'plantuml/src/test/plantuml'
  args '.git'

  args 'asciidoc/src/test/asciidoc'
  args 'plaintext/src/test/testfiles'
    args 'javaparser/src/test'

    //args 'cpp/src/test/ast'
    //args 'privatetestdata'
}

task(jqaanalyze, type: JavaExec) {
  main = 'com.buschmais.jqassistant.commandline.Main'
  classpath = configurations.jqaRuntime
  args 'analyze'
  args '-r'
//  args 'doc/architecture'
  args 'jqassistant/jqassistant-rules'
}

task(jqa, dependsOn: ['jqascan','jqaanalyze']) {
  jqaanalyze.mustRunAfter jqascan
}

task(jqs, type: JavaExec) {
  main = 'com.buschmais.jqassistant.commandline.Main'
  classpath = configurations.jqaRuntime
  args 'server'
  standardInput = System.in
}

task install2jqa(type: Copy) {
  def jqahome = "$System.env.JQASSISTANT_HOME"
  println 'jqahome = ' + jqahome;

  mkdir "$projectDir/install"
  into "$projectDir/install"
  from configurations.runtime
  exclude { details ->
    details.file.name.contains('asm-3.1')
  }
}

build.dependsOn jqa
